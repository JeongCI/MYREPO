<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
  <!-- 예외처리 -->
<!--   <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
      <property name="exceptionMappings">
          <props>
            <prop key="java.lang.NullPointerException">cmn/nullPointError</prop>
            <prop key="java.lang.ArithmeticException">cmn/arithmeticException</prop>
          </props>
      </property>
                    
      Default예외 : 특정예외 이외 모든 예외
      <property name="defaultErrorView" value="cmn/error"/>
  </bean> -->
  
  
  <!-- mybatis 설정 -->
  <!-- mybatis db연결 객체 생성 -->
  <bean id="sqlSessionTemplate"
    class="org.mybatis.spring.SqlSessionTemplate">
    <!-- xml mybatis설정 파일 읽기 -->
    <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
  </bean>
  <!-- xml mybatis설정 파일 읽기: 환경설정 파일 읽기 mybatis-config.xml mapper: mapper/**/*.xml -->
  <bean id="sqlSessionFactoryBean"
    class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation"
      value="classpath:mybatis-config.xml" />
    <property name="mapperLocations"
      value="classpath:mapper/**/*.xml" />
  </bean>




  <!-- Advice -->
  <bean id="performanceAroundAdvice"
    class="com.pcwk.ehr.aspectj.perform.PerformanceAroundAdvice"></bean>

  <!-- around aop -->

  <aop:config>
    <aop:aspect ref="performanceAroundAdvice">
      <aop:pointcut
        expression="execution(* com.pcwk.ehr..service.*Impl.*(..))"
        id="allPointCut" />
      <aop:around method="performanceAdvice"
        pointcut-ref="allPointCut" />
    </aop:aspect>
  </aop:config>


  <!-- 개발환경 : DummyMailSender(Mail이 외부로 발송 되지 않음!) -->
  <bean id="mailSenderImpl"
    class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp.naver.com" />
    <property name="port" value="465" />
    <property name="username" value="jamesol@naver.com" />
    <property name="password" value="" />
    <property name="defaultEncoding" value="utf-8" />
    <property name="javaMailProperties">
      <props>
        <prop key="mail.smtp.host">smtp.naver.com</prop>
        <prop key="mail.smtp.port">465</prop>
        <prop key="mail.smtp.auth">true</prop>
        <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
        <prop key="mail.smtp.ssl.enable">true</prop>
        <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
        <prop key="mail.debug">true</prop>
      </props>
    </property>
  </bean>

  <bean id="dummyMailSender"
    class="com.pcwk.ehr.cmn.DummyMailSender">

  </bean>
  <!-- Root Context: defines shared resources visible to all other web components -->
  <!-- 트랜잭션 어드바이스 지금까지는 Adivce를 직접 구현 했었다. 하지만 트랜잭션 관리 기능의 어드바이스는 직접 구현하지 
    않는다. 스프링 컨테이너가 <tx:advice 설정을 참조하여 자동으로 생성한다. -->
  <tx:advice id="txAdvice"
    transaction-manager="transactionManager">
    <tx:attributes>
      <!-- do*로 시작하는 메서드는 트랜잭션관리 대상에서 제외 -->
      <tx:method name="do*" read-only="true" />
      <!-- up*시작하는 메서드는 트랜잭션 관리 대상이다. -->
      <tx:method name="up*" read-only="false"
        rollback-for="Exception" />
    </tx:attributes>
  </tx:advice>

  <!-- pointcut+adice = adviser * com.pcwk.ehr.업무.service.*Impl.up*(..) -->
  <aop:config>
    <aop:pointcut
      expression="execution(* com.pcwk.ehr..service.*Impl.*(..))"
      id="txPointCut" />
    <aop:advisor advice-ref="txAdvice"
      pointcut-ref="txPointCut" />
  </aop:config>
  

  <!-- DataSourceTransactionManager -->
  <!-- <constructor-arg ref="dataSource"></constructor-arg> -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"></property>
  </bean>


  <!-- database.properties read -->
  <context:property-placeholder
    location="classpath:/resource/config/database.properties" />

  <!--SimpleDriverDataSource to -->
  <bean id="dataSource"
    class="org.apache.commons.dbcp.BasicDataSource">
    <property name="driverClassName"
      value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
    <property name="url"
      value="jdbc:log4jdbc:oracle:thin:@192.168.3.101:1521:XE" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!-- 최대 접속 허용 갯수 -->
    <property name="maxActive" value="${jdbc.maxActive}" />
    <!-- 여분으로 남결질 Connection -->
    <property name="maxIdle" value="${jdbc.maxIdle}" />
    <!-- DB연결 대기시간 -->
    <property name="maxWait" value="${jdbc.maxWait}" />
    <!-- Connection 잘못 관리되어 버려진 연결 찾아 재활용 -->
    <property name="removeAbandoned"
      value="${jdbc.removeAbandoned}" />
    <!-- 버려진 연결로 인식할 기본 시간 -->
    <property name="removeAbandonedTimeout"
      value="${jdbc.removeAbandonedTimeout}" />
  </bean>

</beans>
