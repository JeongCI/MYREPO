<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    
    <!-- Advice -->
    <bean id="performanceAroundAdvice" class="com.pcwk.ehr.aspectj.perform.PerformanceAroundAdvice"></bean>
    
    <!-- AOP -->
    <aop:config>
        <aop:aspect ref="performanceAroundAdvice">
	        <aop:pointcut expression="execution(* com.pcwk.ehr..dao.*Impl.*(..))" id="allPointCut"/>
            <aop:around method="performanceAdvice" pointcut-ref="allPointCut"/>
        </aop:aspect>
    </aop:config>
    
    <!-- 개발환경: DummyMailSender(Mail이 외부로 발송되지 않음!) -->
    <bean id="dummyMailSender" class="com.pcwk.ehr.user.service.DummyMailSender"></bean>
    
    <!-- 
	    Naver smtp 설정
	    SMTP(Simple Mail Transfer Protocol)
	       이메일 전송에 사용되는 프로토콜.
     -->
    <bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
       <property name="host" value="smtp.naver.com"/>
       <property name="port" value="465"/>
       <property name="username" value="jci1203@naver.com"/>
       <property name="password" value=""/>
       <property name="defaultEncoding" value="utf-8"/>
       <property name="javaMailProperties">
           <props>
               <prop key="mail.smtp.host">smtp.naver.com</prop>
               <prop key="mail.smtp.port">465</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
               <prop key="mail.smtp.ssl.enable">true</prop>
               <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
               <prop key="mail.debug">true</prop>
           </props>
       </property>
    </bean>
    
    <!-- 트랜잭션 어드바이스 
    지금가지는 Advice를 직접 구현 했었다. 하지만 트랜잭션 관리 기능의 어드바이스는 직접 구현하지 않는다.
    스프링 컨테이너가 <tx:advice를 통해서 설정을 참조하여 자동으로 생성한다.
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- do*로 시작되는 메서드는 트랜잭션 관리 대상에서 제외. -->
            <tx:method name="do*" read-only="true" />
            <!-- up*으로 시작하는 메서드는 트랜잭션 관리 대상. -->
            <tx:method name="up*" read-only="false" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    
    <!-- pointcut+advice = adviser 
         * com.pcwk.ehr.업무.service.*Impl.up*(..)
    -->
    <aop:config>
        <aop:pointcut expression="execution(* com.pcwk.ehr..service.*Impl.*(..))" id="txPointCut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
    
    <!-- DataSourceTransactionManager -->
    <!-- <constructor-arg ref="dataSource"></constructor-arg> -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- Jta -->
<!--     <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        
    </bean> -->
    
    <!-- UserServiceImpl -->
    <bean id="userService" class="com.pcwk.ehr.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="mailSender" ref="dummyMailSender"></property>
        <!-- <property name="mailSender" ref="mailSenderImpl"></property> -->
    </bean>

    <!-- database.properties read -->
    <context:property-placeholder location="classpath:/resource/config/database.properties"/>
    
    <!-- SimpleDriverDataSource to -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!-- 최대 접속 허용 개수 -->
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <!-- 여분으로 남겨질 Connection -->
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <!-- DB연결 대기시간 -->
        <property name="maxWait" value="${jdbc.maxWait}"></property>
        <!-- Connection 잘못 관리되어 버려진 연결 찾아 재활용 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"></property>
        <!-- 버려진 연결로 인식할 기본 시간 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"></property>
    </bean>
    <!-- <bean id="connectionMaker" class="com.pcwk.ehr.DConnectionMaker"/> -->
    <bean id="userDao" class="com.pcwk.ehr.user.dao.UserDaoImpl">
    <!-- setter통한 주입 
        connectionMaker : set생략하고, 첫 글자를 소문자로 변환
        ref:setConnectionMaker(ConnectionMaker connectionMaker)
    -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>    

</beans>
